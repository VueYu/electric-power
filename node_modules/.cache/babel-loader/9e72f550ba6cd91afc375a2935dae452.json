{"remainingRequest":"E:\\VUE\\VueProject\\electric-power\\node_modules\\babel-loader\\lib\\index.js!E:\\VUE\\VueProject\\electric-power\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\VUE\\VueProject\\electric-power\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\VueProject\\electric-power\\src\\test\\front-collector.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\VUE\\VueProject\\electric-power\\src\\test\\front-collector.vue","mtime":1600850281480},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1599874220956},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\babel-loader\\lib\\index.js","mtime":1599874250055},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1599874220956},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\vue-loader\\lib\\index.js","mtime":1599874242496}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Marquee',\n  data: function data() {\n    return {\n      text: '',\n      // 内容\n      textWidth: 0,\n      // 字符长度\n      isScroll: false // 是否滚动\n\n    };\n  },\n  methods: {\n    init: function init() {\n      // 初始化函数\n      this.text = '滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试';\n    },\n    move: function move() {\n      // 首先获取整个内容的宽度,(展示内容会超出隐藏,无法通过获取盒子宽度取到实际的内容宽度)\n      // 所以专门造了一个 div 块来放内容,隐藏起来 (无法用根据字体内容来计算宽度的方法,存在误差,当内容较多\n      // 的时候误差会相对较大)\n      var width = document.getElementById('hide').getBoundingClientRect().width; // 获取展示块盒模型宽度\n\n      var BoxWidth = document.getElementById('PackagingShell').offsetWidth; // 获取内容展示宽\n\n      var viewBox = document.getElementById('viewBox'); // 判断内容是否超长\n\n      if (BoxWidth - width < 0) {\n        // 内容超长,则获取抄本元素\n        var transcript = document.getElementById('transcript'); // 抄本元素内容填充\n\n        transcript.innerText = this.text; // 设定抄本和主题之间的间距\n\n        transcript.style.marginLeft = '200px';\n      } else {\n        // 没有超长则return,不做任何操作\n        return;\n      } // 设置初始位移距离\n\n\n      var distance = 0; // 移动函数,通过定时器实现\n\n      setInterval(function () {\n        // 位移内用记录是是递减,此处的 1 控制移动变量 s\n        distance = distance - 1; // 判断是否整个内容移动完\n\n        if (-distance >= width) {\n          // 若移动完,则重新设定位移值,此处赋值200是正好把 上面设置的块间距  200px 也加入移动范围,实现移动完无缝跳转\n          distance = 200;\n        } // 实时设置位移距离\n\n\n        viewBox.style.transform = 'translateX(' + distance + 'px)';\n      }, 27); // 移动时间间隔t   s和t 共同决定移动速度\n    }\n  },\n  mounted: function mounted() {\n    // 初始化\n    this.init();\n  },\n  // 更新的时候运动\n  updated: function updated() {\n    this.move();\n  }\n};",{"version":3,"sources":["front-collector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,EADA;AACA;AACA,MAAA,SAAA,EAAA,CAFA;AAEA;AACA,MAAA,QAAA,EAAA,KAHA,CAGA;;AAHA,KAAA;AAKA,GARA;AASA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AAAA;AACA,WAAA,IAAA,GAAA,kFAAA;AACA,KAHA;AAIA,IAAA,IAJA,kBAIA;AACA;AACA;AACA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,cAAA,CAAA,MAAA,EAAA,qBAAA,GAAA,KAAA,CAJA,CAKA;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,cAAA,CAAA,gBAAA,EAAA,WAAA,CANA,CAOA;;AACA,UAAA,OAAA,GAAA,QAAA,CAAA,cAAA,CAAA,SAAA,CAAA,CARA,CASA;;AACA,UAAA,QAAA,GAAA,KAAA,GAAA,CAAA,EAAA;AACA;AACA,YAAA,UAAA,GAAA,QAAA,CAAA,cAAA,CAAA,YAAA,CAAA,CAFA,CAGA;;AACA,QAAA,UAAA,CAAA,SAAA,GAAA,KAAA,IAAA,CAJA,CAKA;;AACA,QAAA,UAAA,CAAA,KAAA,CAAA,UAAA,GAAA,OAAA;AACA,OAPA,MAOA;AACA;AACA;AACA,OApBA,CAqBA;;;AACA,UAAA,QAAA,GAAA,CAAA,CAtBA,CAuBA;;AACA,MAAA,WAAA,CAAA,YAAA;AACA;AACA,QAAA,QAAA,GAAA,QAAA,GAAA,CAAA,CAFA,CAGA;;AACA,YAAA,CAAA,QAAA,IAAA,KAAA,EAAA;AACA;AACA,UAAA,QAAA,GAAA,GAAA;AACA,SAPA,CAQA;;;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,SAAA,GAAA,gBAAA,QAAA,GAAA,KAAA;AACA,OAVA,EAUA,EAVA,CAAA,CAxBA,CAkCA;AACA;AAvCA,GATA;AAkDA,EAAA,OAlDA,qBAkDA;AACA;AACA,SAAA,IAAA;AACA,GArDA;AAsDA;AACA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,IAAA;AACA;AAzDA,CAAA","sourcesContent":["<template>\n  <div id=\"mar\">\n    <!--主div分三部分，图标，系统公告名字，展示区域-->\n    <div class=\"header\">\n      <!--图标-->\n      \n      <!--名字-->\n      <span class=\"announcement\">系统公告：</span>&nbsp;</div>\n    <!--公告展示块-->\n    <div class=\"PackagingShell\" id=\"PackagingShell\">\n      <!--主题内容，展示内容区域-->\n      <div id=\"viewBox\">\n        <!--文本主体-->\n        <span id=\"marquee\">{{text}}</span>\n        <!--文本副本，实现无缝滚动-->\n        <span id=\"transcript\" ></span>\n      </div>\n      <!--隐藏块，用于获取展示文本宽度-->\n      <div id=\"hide\">{{text}}</div>\n    </div>\n  </div>\n</template>\n\r\n<style scoped lang=\"scss\">\n  #mar {\n    /*系统公告字体颜色*/\n    .announcement{\n      color:#ff4786;\n    }\n    height:40px;\n    line-height: 40px;\n    /*公告滚动盒子样式*/\n    .PackagingShell {\n      width: 89%;        /*滚动部分宽度*/\n      overflow: hidden;  /*超出部分隐藏*/\n      font-size: 12px;\n      color: #111;\n    }\n    /*主题内容块设置*/\n    #viewBox {\n      /*设置内容框不可换行,确保两个div块始终在同一行*/\n      white-space: nowrap;\n    }\n    /*内容块设置*/\n    #marquee {\n      /*设置内容块不可换行*/\n      white-space: nowrap;\n    }\n    /*获取宽度的块，用z-index隐藏*/\n    #hide {\n      position: absolute;\n      z-index: -999;\n      top: -9999px;\n      white-space: nowrap;\n    }\n    /*浮动设置和图片设置*/\n    .header {\n      float: left;\n      font-size:12px;\n      >img{\n        vertical-align: middle;\n      }\n    }\n  }\n</style>\n\r\n<script>\nexport default {\n  name: 'Marquee',\n  data () {\n    return {\n      text: '', // 内容\n      textWidth: 0, // 字符长度\n      isScroll: false // 是否滚动\n    }\n  },\n  methods: {\n    init () { // 初始化函数\n        this.text = '滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试滚动无缝链接测试'\n    },\n    move () {\n      // 首先获取整个内容的宽度,(展示内容会超出隐藏,无法通过获取盒子宽度取到实际的内容宽度)\n      // 所以专门造了一个 div 块来放内容,隐藏起来 (无法用根据字体内容来计算宽度的方法,存在误差,当内容较多\n      // 的时候误差会相对较大)\n      let width = document.getElementById('hide').getBoundingClientRect().width\n      // 获取展示块盒模型宽度\n      let BoxWidth = document.getElementById('PackagingShell').offsetWidth\n      // 获取内容展示宽\n      let viewBox = document.getElementById('viewBox')\n      // 判断内容是否超长\n      if ((BoxWidth - width) < 0) {\n        // 内容超长,则获取抄本元素\n        let transcript = document.getElementById('transcript')\n        // 抄本元素内容填充\n        transcript.innerText = this.text\n        // 设定抄本和主题之间的间距\n        transcript.style.marginLeft = '200px'\n      } else {\n        // 没有超长则return,不做任何操作\n        return\n      }\n      // 设置初始位移距离\n      let distance = 0\n      // 移动函数,通过定时器实现\n      setInterval(function () {\n        // 位移内用记录是是递减,此处的 1 控制移动变量 s\n        distance = distance - 1\n        // 判断是否整个内容移动完\n        if (-distance >= width) {\n          // 若移动完,则重新设定位移值,此处赋值200是正好把 上面设置的块间距  200px 也加入移动范围,实现移动完无缝跳转\n          distance = 200\n        }\n        // 实时设置位移距离\n        viewBox.style.transform = 'translateX(' + distance + 'px)'\n      }, 27) // 移动时间间隔t   s和t 共同决定移动速度\n    }\n  },\n  mounted () {\n    // 初始化\n    this.init()\n  },\n  // 更新的时候运动\n  updated: function () {\n    this.move()\n  }\n}\n</script>\n"],"sourceRoot":"src/test"}]}