{"remainingRequest":"E:\\VUE\\VueProject\\electric-power\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\VUE\\VueProject\\electric-power\\src\\test\\front-collector.vue?vue&type=style&index=0&id=1e98d876&scoped=true&lang=css&","dependencies":[{"path":"E:\\VUE\\VueProject\\electric-power\\src\\test\\front-collector.vue","mtime":1600849939159},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\css-loader\\index.js","mtime":1599874204759},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1599874242514},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\postcss-loader\\src\\index.js","mtime":1599874248574},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1599874220956},{"path":"E:\\VUE\\VueProject\\electric-power\\node_modules\\vue-loader\\lib\\index.js","mtime":1599874242496}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 限制外框宽度，隐藏多余的部分\n.wrap {\n  overflow: hidden;\n}\n// 移动框宽度设置\n#box {\n  width: 80000%;\n}\n// 文字一行显示\n#box div {\n  float: left;\n}\n// 设置前后间隔\n#marquee {\n   margin: 0 16px 0 0;\n}\n// 获取宽度的节点，隐藏掉\n#node {\n  position: absolute;\n  z-index: -999;\n  top: -999999px;\n}\n",{"version":3,"sources":["front-collector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"front-collector.vue","sourceRoot":"src/test","sourcesContent":["<template>\n  <div class=\"wrap\"> // 外框，固定宽度\n    <div id=\"box\">  // 内部滚动框\n      <div id=\"marquee\">{{text}}</div>  //展示的文字\n      <div id=\"copy\"></div>  // 文字副本，为了实现无缝滚动\n    </div>\n    <div id=\"node\">{{text}}</div> //为了获取text实际宽度\n  </div>\n</template>\n<script>\nexport default {\n  name: 'Marquee',\n  props: ['lists'], // 父组件传入数据， 数组形式 [ \"连雨不知春去\"，\"一晴方觉夏深\"]\n  data () {\n    return {\n      text: '' // 数组文字转化后的字符串\n    }\n  },\n  methods: {\n    move () {\n// 获取文字text 的计算后宽度  （由于overflow的存在，直接获取不到，需要独立的node计算）\n      let width = document.getElementById('node').getBoundingClientRect().width \n      let box = document.getElementById('box')\n      let copy = document.getElementById('copy')\n      copy.innerText = this.text // 文字副本填充\n      let distance = 0 // 位移距离\n//设置位移\n      setInterval(function () { \n        distance = distance - 1\n // 如果位移超过文字宽度，则回到起点\n        if (-distance >= width) {\n          distance = 16\n        }\n        box.style.transform = 'translateX(' + distance + 'px)'\n      }, 20) \n    }\n  },\n// 把父组件传入的arr转化成字符串\n  mounted: function () {\n    for (let i = 0; i < this.lists.length; i++) {\n      this.text += ' ' + this.lists[i]\n    }\n  },\n// 更新的时候运动\n  updated: function () {\n    this.move()\n  }\n}\n</script>\n<style scoped>\n// 限制外框宽度，隐藏多余的部分\n.wrap {\n  overflow: hidden;\n}\n// 移动框宽度设置\n#box {\n  width: 80000%;\n}\n// 文字一行显示\n#box div {\n  float: left;\n}\n// 设置前后间隔\n#marquee {\n   margin: 0 16px 0 0;\n}\n// 获取宽度的节点，隐藏掉\n#node {\n  position: absolute;\n  z-index: -999;\n  top: -999999px;\n}\n</style>\n"]}]}